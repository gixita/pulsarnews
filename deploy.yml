# Ansible playbook for deploying a Flask app

---
# Install system apt packages
- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
  - name: update cache
    apt: update_cache=yes cache_valid_time=43200
  - name: install packages
    apt: name={{item}} state=present
    loop: ['python3-pip', 'python3-dev', 'nginx', 'build-essential', 'libssl-dev', 'libffi-dev', 'libpq-dev', 'python3-setuptools', 'python3-psycopg2', 
'python3-venv', 'virtualenv', 'ufw']

- hosts: webservers
  tasks:
  - name: clone repo
    git:
      repo: 'https://github.com/{{ github_user }}/{{ app_name }}.git'
      dest: /home/{{ ansible_ssh_user }}/{{ app_name }}
      update: yes  # Does a git pull if the repo already exists
  - name: copy env file
    copy:
      src: .env
      dest: /home/{{ ansible_ssh_user }}/{{ app_name }}/.env
  - name: install modules in a virtualenv
    pip:
      requirements: /home/{{ ansible_ssh_user }}/{{ app_name }}/requirements.txt
      virtualenv: /home/{{ ansible_ssh_user }}/{{ app_name }}/venv
      virtualenv_python: python3.8

# Change firewall rules
- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
  - name: enable ufw
    ufw:
      state: enabled
  - name: open firewall for website
    ufw:
      rule: allow
      port: "5000"
  - name: open firewall for ssh
    ufw:
      rule: allow
      port: "22"
  - name: open firewall for nginx
    ufw:
      rule: allow
      name: Nginx Full
  - name: restart ufw
    systemd: name=ufw state=restarted enabled=yes

# Configure app systemd service and nginx
- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
  - name: template systemd service config
    template:
      src: .service
      dest: /etc/systemd/system/{{ app_name }}.service
  - name: start systemd app service
    systemd: name={{ app_name }}.service state=restarted enabled=yes
  - name: template nginx site config
    template:
      src: .nginx
      dest: /etc/nginx/sites-available/{{ app_name }}
  - name: remove default nginx site config
    file: path=/etc/nginx/sites-enabled/default state=absent
  # - command: mv /etc/nginx/sites-enabled/default /tmp/nginx.sites-enabled.default
  - name: enable nginx site
    file:
      src: /etc/nginx/sites-available/{{ app_name }}
      dest: /etc/nginx/sites-enabled/default
      state: link
      force: yes
  - name: restart nginx
    systemd: name=nginx state=restarted enabled=yes

# # Run a quick test to verify the site is working
# - hosts: webservers
#   tasks:
#   - name: get url
#     get_url:
#       url: http://{{inventory_hostname}}
#       dest: /tmp/index.html
#   - name: read html
#     shell: cat /tmp/index.html
#     register: html_contents
#   - name: check for string in html
#     when: html_contents.stdout.find('hello') != -1
#     debug: msg="success!"